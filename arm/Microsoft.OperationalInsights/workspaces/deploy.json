{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Log Analytics workspace"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "serviceTier": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "allowedValues": [
        "Free",
        "Standalone",
        "PerNode",
        "PerGB2018"
      ],
      "metadata": {
        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode"
      }
    },
    "storageInsightsConfigs": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of storage accounts to be read by the workspace."
      }
    },
    "linkedServices": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of services to be linked."
      }
    },
    "savedSearches": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Kusto Query Language searches to save."
      }
    },
    "dataSources": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. LAW data sources to configure."
      }
    },
    "gallerySolutions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. LAW gallerySolutions from the gallery."
      }
    },
    "dataRetention": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 730,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Number of days data will be retained for"
      }
    },
    "dailyQuotaGb": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "metadata": {
        "description": "Optional. The workspace daily quota for ingestion."
      }
    },
    "publicNetworkAccessForIngestion": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. The network access type for accessing Log Analytics ingestion."
      }
    },
    "publicNetworkAccessForQuery": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. The network access type for accessing Log Analytics query."
      }
    },
    "useResourcePermissions": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of a log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
      }
    },
    "logsToEnable": {
      "type": "array",
      "defaultValue": [
        "Audit"
      ],
      "allowedValues": [
        "Audit"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "metricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('logsToEnable'))]",
        "input": {
          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('metricsToEnable'))]",
        "input": {
          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "logAnalyticsSearchVersion": 1
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "features": {
          "searchVersion": "[variables('logAnalyticsSearchVersion')]",
          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
        },
        "sku": {
          "name": "[parameters('serviceTier')]"
        },
        "retentionInDays": "[parameters('dataRetention')]",
        "workspaceCapping": {
          "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
        },
        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
      }
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "logAnalyticsWorkspace_storageInsightConfigs",
        "count": "[length(parameters('storageInsightsConfigs'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('name')]"
          },
          "containers": {
            "value": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'containers'), parameters('storageInsightsConfigs')[copyIndex()].containers, createArray())]"
          },
          "tables": {
            "value": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'tables'), parameters('storageInsightsConfigs')[copyIndex()].tables, createArray())]"
          },
          "storageAccountId": {
            "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountId'), '/')))]",
              "metadata": {
                "description": "Optional. The name of the storage insights config"
              }
            },
            "storageAccountId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Azure Resource Manager ID of the storage account resource."
              }
            },
            "containers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The names of the blob containers that the workspace should read."
              }
            },
            "tables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The names of the Azure tables that the workspace should read."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to configure in the resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "containers": "[parameters('containers')]",
                "tables": "[parameters('tables')]",
                "storageAccount": {
                  "id": "[parameters('storageAccountId')]",
                  "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-06-01').keys[0].value]"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed storage insights configuration"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the storage insight configuration is deployed"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the storage insights configuration"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "logAnalyticsWorkspace_linkedServices",
        "count": "[length(parameters('linkedServices'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('linkedServices')[copyIndex()].name]"
          },
          "resourceId": {
            "value": "[parameters('linkedServices')[copyIndex()].resourceId]"
          },
          "writeAccessResourceId": {
            "value": "[if(contains(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId'), parameters('linkedServices')[copyIndex()].writeAccessResourceId, '')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the link"
              }
            },
            "resourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
              }
            },
            "writeAccessResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access. "
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to configure in the resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resourceId": "[parameters('resourceId')]",
                "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed linked service"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the linked service is deployed"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed linked service"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "logAnalyticsWorkspace_savedSearches",
        "count": "[length(parameters('savedSearches'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
          },
          "displayName": {
            "value": "[parameters('savedSearches')[copyIndex()].displayName]"
          },
          "category": {
            "value": "[parameters('savedSearches')[copyIndex()].category]"
          },
          "query": {
            "value": "[parameters('savedSearches')[copyIndex()].query]"
          },
          "functionAlias": {
            "value": "[if(contains(parameters('savedSearches')[copyIndex()], 'functionAlias'), parameters('savedSearches')[copyIndex()].functionAlias, '')]"
          },
          "functionParameters": {
            "value": "[if(contains(parameters('savedSearches')[copyIndex()], 'functionParameters'), parameters('savedSearches')[copyIndex()].functionParameters, '')]"
          },
          "version": {
            "value": "[if(contains(parameters('savedSearches')[copyIndex()], 'version'), parameters('savedSearches')[copyIndex()].version, 2)]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the saved search"
              }
            },
            "displayName": {
              "type": "string",
              "metadata": {
                "description": "Required. Display name for the search."
              }
            },
            "category": {
              "type": "string",
              "metadata": {
                "description": "Required. Query category."
              }
            },
            "query": {
              "type": "string",
              "metadata": {
                "description": "Required. Kusto Query to be stored."
              }
            },
            "tags": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Tags to configure in the resource."
              }
            },
            "functionAlias": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The function alias if query serves as a function.."
              }
            },
            "functionParameters": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
              }
            },
            "version": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Optional. The version number of the query language."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "properties": {
                "tags": "[parameters('tags')]",
                "displayName": "[parameters('displayName')]",
                "category": "[parameters('category')]",
                "query": "[parameters('query')]",
                "functionAlias": "[parameters('functionAlias')]",
                "functionParameters": "[parameters('functionParameters')]",
                "version": "[parameters('version')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed saved search"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the saved search is deployed"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed saved search"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "logAnalyticsWorkspace_dataSources",
        "count": "[length(parameters('dataSources'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('dataSources')[copyIndex()].name]"
          },
          "kind": {
            "value": "[parameters('dataSources')[copyIndex()].kind]"
          },
          "linkedResourceId": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'linkedResourceId'), parameters('dataSources')[copyIndex()].linkedResourceId, '')]"
          },
          "eventLogName": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'eventLogName'), parameters('dataSources')[copyIndex()].eventLogName, '')]"
          },
          "eventTypes": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'eventTypes'), parameters('dataSources')[copyIndex()].eventTypes, createArray())]"
          },
          "objectName": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'objectName'), parameters('dataSources')[copyIndex()].objectName, '')]"
          },
          "instanceName": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'instanceName'), parameters('dataSources')[copyIndex()].instanceName, '')]"
          },
          "intervalSeconds": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'intervalSeconds'), parameters('dataSources')[copyIndex()].intervalSeconds, 60)]"
          },
          "counterName": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'counterName'), parameters('dataSources')[copyIndex()].counterName, '')]"
          },
          "state": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'state'), parameters('dataSources')[copyIndex()].state, '')]"
          },
          "syslogName": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogName'), parameters('dataSources')[copyIndex()].syslogName, '')]"
          },
          "syslogSeverities": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogSeverities'), parameters('dataSources')[copyIndex()].syslogSeverities, createArray())]"
          },
          "performanceCounters": {
            "value": "[if(contains(parameters('dataSources')[copyIndex()], 'performanceCounters'), parameters('dataSources')[copyIndex()].performanceCounters, createArray())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the solution"
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "AzureActivityLog",
              "allowedValues": [
                "AzureActivityLog",
                "WindowsEvent",
                "WindowsPerformanceCounter",
                "IISLogs",
                "LinuxSyslog",
                "LinuxSyslogCollection",
                "LinuxPerformanceObject",
                "LinuxPerformanceCollection"
              ],
              "metadata": {
                "description": "Required. The kind of the DataSource."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to configure in the resource."
              }
            },
            "linkedResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the resource to be linked."
              }
            },
            "eventLogName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
              }
            },
            "eventTypes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
              }
            },
            "objectName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
              }
            },
            "instanceName": {
              "type": "string",
              "defaultValue": "*",
              "metadata": {
                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
              }
            },
            "intervalSeconds": {
              "type": "int",
              "defaultValue": 60,
              "metadata": {
                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
              }
            },
            "performanceCounters": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
              }
            },
            "counterName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
              }
            },
            "state": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
              }
            },
            "syslogName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. System log to configure when kind is LinuxSyslog."
              }
            },
            "syslogSeverities": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Severities to configure when kind is LinuxSyslog."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
              "apiVersion": "2020-08-01",
              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "kind": "[parameters('kind')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed data source"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the data source is deployed"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed data source"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('gallerySolutions')))]",
      "copy": {
        "name": "logAnalyticsWorkspace_solutions",
        "count": "[length(parameters('gallerySolutions'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "gallerySolution": {
            "value": "[parameters('gallerySolutions')[copyIndex()].name]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[parameters('name')]"
          },
          "product": {
            "value": "[parameters('gallerySolutions')[copyIndex()].product]"
          },
          "publisher": {
            "value": "[parameters('gallerySolutions')[copyIndex()].publisher]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "gallerySolution": {
              "type": "string"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "product": {
              "type": "string",
              "defaultValue": "OMSGallery"
            },
            "publisher": {
              "type": "string",
              "defaultValue": "Microsoft"
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[format('{0}({1})', parameters('gallerySolution'), parameters('logAnalyticsWorkspaceName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              },
              "plan": {
                "name": "[format('{0}({1})', parameters('gallerySolution'), parameters('logAnalyticsWorkspaceName'))]",
                "product": "[format('{0}/{1}', parameters('product'), parameters('gallerySolution'))]",
                "promotionCode": "",
                "publisher": "[parameters('publisher')]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationsManagement/solutions', format('{0}({1})', parameters('gallerySolution'), parameters('logAnalyticsWorkspaceName')))]",
              "metadata": {
                "description": "The resource ID of the deployed solution"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the solution will be deployed"
              }
            },
            "name": {
              "type": "string",
              "value": "[format('{0}({1})', parameters('gallerySolution'), parameters('logAnalyticsWorkspaceName'))]",
              "metadata": {
                "description": "The name of the deployed solution"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "logAnalyticsWorkspace_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-LAW-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalIds": {
              "type": "array"
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "resourceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Automation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f353d9bd-d4a6-484e-a77a-8050b599b867')]",
              "Azure Sentinel Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]",
              "Azure Sentinel Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]",
              "Azure Sentinel Responder": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]",
              "Data Purger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the deployed log analytics workspace"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group of the deployed log analytics workspace"
      }
    },
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the deployed log analytics workspace"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))).customerId]",
      "metadata": {
        "description": "The ID associated with the workspace"
      }
    }
  }
}
