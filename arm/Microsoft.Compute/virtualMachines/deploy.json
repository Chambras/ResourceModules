{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)), 10)]",
      "metadata": {
        "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
      }
    },
    "vmComputerNamesTransformation": {
      "type": "string",
      "defaultValue": "none",
      "metadata": {
        "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Optional. Specifies the size for the VMs"
      }
    },
    "imageReference": {
      "type": "object",
      "metadata": {
        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
      }
    },
    "plan": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
      }
    },
    "osDisk": {
      "type": "object",
      "metadata": {
        "description": "Required. Specifies the OS disk."
      }
    },
    "dataDisks": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies the data disks."
      }
    },
    "ultraSSDEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
      }
    },
    "adminUsername": {
      "type": "secureString",
      "metadata": {
        "description": "Required. Administrator username"
      }
    },
    "adminPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed"
      }
    },
    "customData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
      }
    },
    "certificatesToBeInstalled": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
      }
    },
    "vmPriority": {
      "type": "string",
      "defaultValue": "Regular",
      "allowedValues": [
        "Regular",
        "Low",
        "Spot"
      ],
      "metadata": {
        "description": "Optional. Specifies the priority for the virtual machine."
      }
    },
    "enableEvictionPolicy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
      }
    },
    "maxPriceForLowPriorityVm": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
      }
    },
    "dedicatedHostId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
      }
    },
    "licenseType": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "Windows_Client",
        "Windows_Server",
        ""
      ],
      "metadata": {
        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
      }
    },
    "publicKeys": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs"
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "bootDiagnosticStorageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account used to store boot diagnostic information. Boot diagnostics will be disabled if no value is provided."
      }
    },
    "bootDiagnosticStorageAccountUri": {
      "type": "string",
      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
      "metadata": {
        "description": "Optional. Storage account boot diagnostic base URI."
      }
    },
    "proximityPlacementGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource name of a proximity placement group."
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource name of an availability set. Cannot be used in combination with availability zone nor scale set."
      }
    },
    "useAvailabilityZone": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
      }
    },
    "availabilityZone": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1,
        2,
        3
      ],
      "metadata": {
        "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then the automatic algorithm will be used to give every VM in a different zone (up to three zones). Cannot be used in combination with availability set nor scale set."
      }
    },
    "nicConfigurations": {
      "type": "array",
      "metadata": {
        "description": "Required. Configures NICs and PIPs."
      }
    },
    "pipLogsToEnable": {
      "type": "array",
      "defaultValue": [
        "DDoSProtectionNotifications",
        "DDoSMitigationFlowLogs",
        "DDoSMitigationReports"
      ],
      "allowedValues": [
        "DDoSProtectionNotifications",
        "DDoSMitigationFlowLogs",
        "DDoSMitigationReports"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "pipMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "nicMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "backupVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Recovery service vault name to add VMs to backup."
      }
    },
    "backupVaultResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
      }
    },
    "backupPolicyName": {
      "type": "string",
      "defaultValue": "DefaultPolicy",
      "metadata": {
        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
      }
    },
    "enableServerSideEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
      }
    },
    "allowExtensionOperations": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
      }
    },
    "extensionDomainJoinPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter"
      }
    },
    "extensionDomainJoinConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "extensionAntiMalwareConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "extensionMonitoringAgentConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "monitoringWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
      }
    },
    "extensionDependencyAgentConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "extensionNetworkWatcherAgentConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "extensionDiskEncryptionConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "extensionDSCConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false
      },
      "metadata": {
        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "extensionCustomScriptConfig": {
      "type": "object",
      "defaultValue": {
        "enabled": false,
        "fileData": []
      },
      "metadata": {
        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('u')]",
      "metadata": {
        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
      }
    },
    "sasTokenValidityLength": {
      "type": "string",
      "defaultValue": "PT8H",
      "metadata": {
        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
      }
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "Required. The chosen OS type"
      }
    },
    "disablePasswordAuthentication": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies whether password authentication should be disabled."
      }
    },
    "provisionVMAgent": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
      }
    },
    "enableAutomaticUpdates": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
      }
    },
    "timeZone": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be TimeZoneInfo.id value from time zones returned by TimeZoneInfo.GetSystemTimeZones."
      }
    },
    "additionalUnattendContent": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object"
      }
    },
    "winRM": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
      }
    },
    "configurationProfileAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Any VM configuration profile assignments"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "publicKeysFormatted",
        "count": "[length(parameters('publicKeys'))]",
        "input": {
          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
        }
      }
    ],
    "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
      "ssh": {
        "publicKeys": "[variables('publicKeysFormatted')]"
      },
      "provisionVMAgent": "[parameters('provisionVMAgent')]"
    },
    "windowsConfiguration": {
      "provisionVMAgent": "[parameters('provisionVMAgent')]",
      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
      "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
    },
    "accountSasProperties": {
      "signedServices": "b",
      "signedPermission": "r",
      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
      "signedResourceTypes": "o",
      "signedProtocol": "https"
    },
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-07-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "identity": "[variables('identity')]",
      "tags": "[parameters('tags')]",
      "zones": "[if(parameters('useAvailabilityZone'), array(parameters('availabilityZone')), null())]",
      "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "storageProfile": {
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(parameters('dataDisks'))]",
              "input": {
                "lun": "[copyIndex('dataDisks')]",
                "name": "[format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                "managedDisk": {
                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                  "diskEncryptionSet": {
                    "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, null())]"
                  }
                }
              }
            }
          ],
          "imageReference": "[parameters('imageReference')]",
          "osDisk": {
            "name": "[format('{0}-disk-os-01', parameters('name'))]",
            "createOption": "[parameters('osDisk').createOption]",
            "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
            "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
            "managedDisk": {
              "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]"
            }
          }
        },
        "additionalCapabilities": {
          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
        },
        "osProfile": {
          "computerName": "[variables('vmComputerNameTransformed')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
          "secrets": "[parameters('certificatesToBeInstalled')]",
          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
        },
        "networkProfile": {
          "copy": [
            {
              "name": "networkInterfaces",
              "count": "[length(parameters('nicConfigurations'))]",
              "input": {
                "properties": {
                  "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                },
                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
              }
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[not(empty(parameters('bootDiagnosticStorageAccountName')))]",
            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
          }
        },
        "availabilitySet": "[if(not(empty(parameters('availabilitySetName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')))), null())]",
        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupName'))), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')))), null())]",
        "priority": "[parameters('vmPriority')]",
        "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
        "billingProfile": "[if(and(not(empty(parameters('vmPriority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), json(format('{{\"maxPrice\":\"{0}\"}}', parameters('maxPriceForLowPriorityVm'))), null())]",
        "host": "[if(not(empty(parameters('dedicatedHostId'))), json(format('{{\"id\":\"{0}\"}}', parameters('dedicatedHostId'))), null())]",
        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
      },
      "dependsOn": [
        "virtualMachine_nic"
      ]
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "virtualMachine_nic",
        "count": "[length(parameters('nicConfigurations'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "networkInterfaceName": {
            "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
          },
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableIPForwarding": {
            "value": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), parameters('nicConfigurations')[copyIndex()].enableIPForwarding, false()), false())]"
          },
          "enableAcceleratedNetworking": {
            "value": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), if(not(empty(parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking)), parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking, false()), false())]"
          },
          "dnsServers": {
            "value": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), parameters('nicConfigurations')[copyIndex()].dnsServers, createArray()), createArray())]"
          },
          "networkSecurityGroupId": {
            "value": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'nsgId'), if(not(empty(parameters('nicConfigurations')[copyIndex()].nsgId)), parameters('nicConfigurations')[copyIndex()].nsgId, ''), '')]"
          },
          "ipConfigurationArray": {
            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
          },
          "lock": {
            "value": "[parameters('lock')]"
          },
          "diagnosticStorageAccountId": {
            "value": "[parameters('diagnosticStorageAccountId')]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[parameters('diagnosticLogsRetentionInDays')]"
          },
          "diagnosticWorkspaceId": {
            "value": "[parameters('diagnosticWorkspaceId')]"
          },
          "diagnosticEventHubAuthorizationRuleId": {
            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
          },
          "diagnosticEventHubName": {
            "value": "[parameters('diagnosticEventHubName')]"
          },
          "metricsToEnable": {
            "value": "[parameters('nicMetricsToEnable')]"
          },
          "pipMetricsToEnable": {
            "value": "[parameters('pipMetricsToEnable')]"
          },
          "pipLogsToEnable": {
            "value": "[parameters('pipLogsToEnable')]"
          },
          "roleAssignments": {
            "value": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), parameters('nicConfigurations')[copyIndex()].roleAssignments, createArray()), createArray())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "networkInterfaceName": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "enableIPForwarding": {
              "type": "bool",
              "defaultValue": false
            },
            "enableAcceleratedNetworking": {
              "type": "bool",
              "defaultValue": false
            },
            "dnsServers": {
              "type": "array",
              "defaultValue": []
            },
            "networkSecurityGroupId": {
              "type": "string",
              "defaultValue": ""
            },
            "ipConfigurationArray": {
              "type": "array"
            },
            "lock": {
              "type": "string"
            },
            "diagnosticStorageAccountId": {
              "type": "string"
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int"
            },
            "diagnosticWorkspaceId": {
              "type": "string"
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string"
            },
            "diagnosticEventHubName": {
              "type": "string"
            },
            "pipMetricsToEnable": {
              "type": "array"
            },
            "pipLogsToEnable": {
              "type": "array"
            },
            "metricsToEnable": {
              "type": "array"
            },
            "roleAssignments": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-03-01",
              "name": "[parameters('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "ipConfigurations",
                    "count": "[length(parameters('ipConfigurationArray'))]",
                    "input": {
                      "name": "[if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].name, null())]",
                      "properties": {
                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                        "privateIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'vmIPAddress'), if(not(empty(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress)), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].vmIPAddress, null()), null())]",
                        "publicIPAddress": "[if(contains(parameters('ipConfigurationArray')[copyIndex('ipConfigurations')], 'pipconfiguration'), json(format('{{\"id\":\"{0}\"}}', resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].pipconfiguration.publicIpNameSuffix)))), null())]",
                        "subnet": {
                          "id": "[parameters('ipConfigurationArray')[copyIndex('ipConfigurations')].subnetId]"
                        }
                      }
                    }
                  }
                ],
                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]"
              },
              "dependsOn": [
                "networkInterface_publicIPConfigurations"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
              "name": "[format('{0}-{1}-lock', parameters('networkInterfaceName'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('networkInterfaceName'))]",
              "name": "[format('{0}-diagnosticSettings', parameters('networkInterfaceName'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            },
            {
              "condition": "[contains(parameters('ipConfigurationArray')[copyIndex()], 'pipconfiguration')]",
              "copy": {
                "name": "networkInterface_publicIPConfigurations",
                "count": "[length(parameters('ipConfigurationArray'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-PIP-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "publicIPAddressName": {
                    "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                  },
                  "publicIPPrefixId": {
                    "value": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPPrefixId'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId)), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPPrefixId, ''), '')]"
                  },
                  "publicIPAllocationMethod": {
                    "value": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'publicIPAllocationMethod'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod)), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.publicIPAllocationMethod, 'Static'), 'Static')]"
                  },
                  "skuName": {
                    "value": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuName'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName)), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuName, 'Standard'), 'Standard')]"
                  },
                  "skuTier": {
                    "value": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'skuTier'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier)), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.skuTier, 'Regional'), 'Regional')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[parameters('diagnosticStorageAccountId')]"
                  },
                  "diagnosticLogsRetentionInDays": {
                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('diagnosticWorkspaceId')]"
                  },
                  "diagnosticEventHubAuthorizationRuleId": {
                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                  },
                  "diagnosticEventHubName": {
                    "value": "[parameters('diagnosticEventHubName')]"
                  },
                  "metricsToEnable": {
                    "value": "[parameters('pipMetricsToEnable')]"
                  },
                  "logsToEnable": {
                    "value": "[parameters('pipLogsToEnable')]"
                  },
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "roleAssignments": {
                    "value": "[if(contains(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration, 'roleAssignments'), if(not(empty(parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments)), parameters('ipConfigurationArray')[copyIndex()].pipconfiguration.roleAssignments, createArray()), createArray())]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "publicIPAddressName": {
                      "type": "string"
                    },
                    "publicIPPrefixId": {
                      "type": "string"
                    },
                    "publicIPAllocationMethod": {
                      "type": "string"
                    },
                    "skuName": {
                      "type": "string"
                    },
                    "skuTier": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string"
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int"
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string"
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string"
                    },
                    "diagnosticEventHubName": {
                      "type": "string"
                    },
                    "metricsToEnable": {
                      "type": "array"
                    },
                    "logsToEnable": {
                      "type": "array"
                    },
                    "lock": {
                      "type": "string"
                    },
                    "roleAssignments": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('logsToEnable'))]",
                        "input": {
                          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('metricsToEnable'))]",
                        "input": {
                          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('publicIPAddressName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixId'))), createObject('id', parameters('publicIPPrefixId')), null())]"
                      }
                    },
                    {
                      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2017-04-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                      "name": "[format('{0}-{1}-lock', parameters('publicIPAddressName'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('publicIPAddressName'))]",
                      "name": "[format('{0}-diagnosticSettings', parameters('publicIPAddressName'))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "publicIpAddress_rbac",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "parameters": {
                            "principalIds": {
                              "type": "array"
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string"
                            },
                            "resourceId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2021-04-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the public IP address was deployed."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('publicIPAddressName')]",
                      "metadata": {
                        "description": "The name of the public IP address."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddressName'))]",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      }
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "networkInterface_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "principalIds": {
                      "type": "array"
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                      "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                      "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]"
              ]
            }
          ]
        }
      }
    },
    {
      "copy": {
        "name": "vm_configurationProfileAssignment",
        "count": "[length(parameters('configurationProfileAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-ConfigurationProfileAssignment-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "configurationProfile": {
            "value": "[parameters('configurationProfileAssignments')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The name of the configuration profile assignment"
              }
            },
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the VM to be associated"
              }
            },
            "configurationProfile": {
              "type": "string",
              "allowedValues": [
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest"
              ],
              "metadata": {
                "description": "Required. The configuration profile of automanage"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automanage/configurationProfileAssignments",
              "apiVersion": "2021-04-30-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('virtualMachineName'))]",
              "name": "[parameters('name')]",
              "properties": {
                "configurationProfile": "[parameters('configurationProfile')]"
              }
            }
          ],
          "outputs": {
            "resourceId": {
              "type": "string",
              "value": "[extensionResourceId(resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName')), 'Microsoft.Automanage/configurationProfileAssignments', parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the configuration profile assignment"
              }
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the configuration profile assignment"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group the configuration profile assignment was deployed into"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionDomainJoinConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "DomainJoin"
          },
          "publisher": {
            "value": "Microsoft.Compute"
          },
          "type": {
            "value": "JsonADDomainExtension"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), parameters('extensionDomainJoinConfig').typeHandlerVersion, '1.3')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), parameters('extensionDomainJoinConfig').enableAutomaticUpgrade, false())]"
          },
          "settings": {
            "value": "[parameters('extensionDomainJoinConfig').settings]"
          },
          "protectedSettings": {
            "value": {
              "Password": "[parameters('extensionDomainJoinPassword')]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "MicrosoftAntiMalware"
          },
          "publisher": {
            "value": "Microsoft.Azure.Security"
          },
          "type": {
            "value": "IaaSAntimalware"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), parameters('extensionAntiMalwareConfig').typeHandlerVersion, '1.3')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade, false())]"
          },
          "settings": {
            "value": "[parameters('extensionAntiMalwareConfig').settings]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "MicrosoftMonitoringAgent"
          },
          "publisher": {
            "value": "Microsoft.EnterpriseCloud.Monitoring"
          },
          "type": {
            "value": "[if(equals(parameters('osType'), 'Windows'), 'MicrosoftMonitoringAgent', 'OmsAgentForLinux')]"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), parameters('extensionMonitoringAgentConfig').typeHandlerVersion, if(equals(parameters('osType'), 'Windows'), '1.0', '1.7'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade, false())]"
          },
          "settings": {
            "value": {
              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
            }
          },
          "protectedSettings": {
            "value": {
              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "DependencyAgent"
          },
          "publisher": {
            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
          },
          "type": {
            "value": "[if(equals(parameters('osType'), 'Windows'), 'DependencyAgentWindows', 'DependencyAgentLinux')]"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), parameters('extensionDependencyAgentConfig').typeHandlerVersion, '9.5')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade, true())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "NetworkWatcherAgent"
          },
          "publisher": {
            "value": "Microsoft.Azure.NetworkWatcher"
          },
          "type": {
            "value": "[if(equals(parameters('osType'), 'Windows'), 'NetworkWatcherAgentWindows', 'NetworkWatcherAgentLinux')]"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion, '1.4')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade, false())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionDSCConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "DesiredStateConfiguration"
          },
          "publisher": {
            "value": "Microsoft.Powershell"
          },
          "type": {
            "value": "DSC"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), parameters('extensionDSCConfig').typeHandlerVersion, '2.77')]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), parameters('extensionDSCConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), parameters('extensionDSCConfig').enableAutomaticUpgrade, false())]"
          },
          "settings": {
            "value": "[if(contains(parameters('extensionDSCConfig'), 'settings'), parameters('extensionDSCConfig').settings, createObject())]"
          },
          "protectedSettings": {
            "value": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), parameters('extensionDSCConfig').protectedSettings, createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "CustomScriptExtension"
          },
          "publisher": {
            "value": "[if(equals(parameters('osType'), 'Windows'), 'Microsoft.Compute', 'Microsoft.Azure.Extensions')]"
          },
          "type": {
            "value": "[if(equals(parameters('osType'), 'Windows'), 'CustomScriptExtension', 'CustomScript')]"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), parameters('extensionCustomScriptConfig').typeHandlerVersion, if(equals(parameters('osType'), 'Windows'), '1.10', '2.1'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), parameters('extensionCustomScriptConfig').enableAutomaticUpgrade, false())]"
          },
          "settings": {
            "value": {
              "copy": [
                {
                  "name": "fileUris",
                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                }
              ]
            }
          },
          "protectedSettings": {
            "value": "[if(contains(parameters('extensionCustomScriptConfig'), 'protectedSettings'), parameters('extensionCustomScriptConfig').protectedSettings, createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
      ]
    },
    {
      "condition": "[parameters('extensionDiskEncryptionConfig').enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-DiskEncryption', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualMachineName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "DiskEncryption"
          },
          "publisher": {
            "value": "Microsoft.Azure.Security"
          },
          "type": {
            "value": "[if(equals(parameters('osType'), 'Windows'), 'AzureDiskEncryption', 'AzureDiskEncryptionForLinux')]"
          },
          "typeHandlerVersion": {
            "value": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'typeHandlerVersion'), parameters('extensionDiskEncryptionConfig').typeHandlerVersion, if(equals(parameters('osType'), 'Windows'), '2.2', '1.1'))]"
          },
          "autoUpgradeMinorVersion": {
            "value": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), parameters('extensionDiskEncryptionConfig').autoUpgradeMinorVersion, true())]"
          },
          "enableAutomaticUpgrade": {
            "value": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'enableAutomaticUpgrade'), parameters('extensionDiskEncryptionConfig').enableAutomaticUpgrade, false())]"
          },
          "forceUpdateTag": {
            "value": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'forceUpdateTag'), parameters('extensionDiskEncryptionConfig').forceUpdateTag, '1.0')]"
          },
          "settings": {
            "value": "[parameters('extensionDiskEncryptionConfig').settings]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine that extension is provisioned for"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to"
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher"
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\""
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler"
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true"
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed"
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings"
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings"
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false"
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('backupVaultName')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "backupResourceName": {
            "value": "[format('{0}/Azure/iaasvmcontainer;iaasvmcontainerv2;{1};{2}/vm;iaasvmcontainerv2;{3};{4}', parameters('backupVaultName'), resourceGroup().name, parameters('name'), resourceGroup().name, parameters('name'))]"
          },
          "protectedItemType": {
            "value": "Microsoft.Compute/virtualMachines"
          },
          "backupPolicyId": {
            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
          },
          "sourceResourceId": {
            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "backupResourceName": {
              "type": "string"
            },
            "protectedItemType": {
              "type": "string",
              "allowedValues": [
                "AzureFileShareProtectedItem",
                "AzureVmWorkloadSAPAseDatabase",
                "AzureVmWorkloadSAPHanaDatabase",
                "AzureVmWorkloadSQLDatabase",
                "DPMProtectedItem",
                "GenericProtectedItem",
                "MabFileFolderProtectedItem",
                "Microsoft.ClassicCompute/virtualMachines",
                "Microsoft.Compute/virtualMachines",
                "Microsoft.Sql/servers/databases"
              ]
            },
            "backupPolicyId": {
              "type": "string"
            },
            "sourceResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
              "apiVersion": "2021-06-01",
              "name": "[parameters('backupResourceName')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "protectedItemType": "[parameters('protectedItemType')]",
                "policyId": "[parameters('backupPolicyId')]",
                "sourceResourceId": "[parameters('sourceResourceId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
      ]
    },
    {
      "copy": {
        "name": "virtualMachine_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalIds": {
              "type": "array"
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "resourceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Microsoft OneAsset Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the VM."
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the VM."
      }
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The name of the resource group the VM was created in."
      }
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2021-07-01', 'full').identity.principalId, '')]",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      }
    }
  }
}
