{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 50,
      "metadata": {
        "description": "Optional. Name of the Service Bus Namespace. If no name is provided, then unique name will be created."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Required. Name of this SKU. - Basic, Standard, Premium"
      }
    },
    "zoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enabling this property creates a Premium Service Bus Namespace in regions supported availability zones."
      }
    },
    "authorizationRules": {
      "type": "array",
      "defaultValue": [
        {
          "name": "RootManageSharedAccessKey",
          "rights": [
            "Listen",
            "Manage",
            "Send"
          ]
        }
      ],
      "metadata": {
        "description": "Optional. Authorization Rules for the Service Bus namespace"
      }
    },
    "ipFilterRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. IP Filter Rules for the Service Bus namespace"
      }
    },
    "migrationConfigurations": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The migration configuration."
      }
    },
    "disasterRecoveryConfigs": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The disaster recovery configuration."
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. vNet Rules SubnetIds for the Service Bus namespace."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Configuration Details for private endpoints."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('u')]",
      "metadata": {
        "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
      }
    },
    "queues": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The queues to create in the service bus namespace"
      }
    },
    "logsToEnable": {
      "type": "array",
      "defaultValue": [
        "OperationalLogs"
      ],
      "allowedValues": [
        "OperationalLogs"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "metricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('logsToEnable'))]",
        "input": {
          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('metricsToEnable'))]",
        "input": {
          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "maxNameLength": 50,
    "uniqueServiceBusNamespaceNameUntrim": "[uniqueString(format('Service Bus Namespace{0}', parameters('baseTime')))]",
    "uniqueServiceBusNamespaceName": "[if(greater(length(variables('uniqueServiceBusNamespaceNameUntrim')), variables('maxNameLength')), substring(variables('uniqueServiceBusNamespaceNameUntrim'), 0, variables('maxNameLength')), variables('uniqueServiceBusNamespaceNameUntrim'))]",
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-06-01-preview",
      "name": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(empty(parameters('tags')), null(), parameters('tags'))]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "identity": "[variables('identity')]",
      "properties": {
        "zoneRedundant": "[parameters('zoneRedundant')]"
      }
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]",
      "name": "[format('{0}-{1}-lock', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]",
      "name": "[format('{0}-diagnosticSettings', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[not(empty(parameters('disasterRecoveryConfigs')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-DisasterRecoveryConfig', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]"
          },
          "name": {
            "value": "[if(contains(parameters('disasterRecoveryConfigs'), 'name'), parameters('disasterRecoveryConfigs').name, 'default')]"
          },
          "alternateName": {
            "value": "[if(contains(parameters('disasterRecoveryConfigs'), 'alternateName'), parameters('disasterRecoveryConfigs').alternateName, '')]"
          },
          "partnerNamespaceResourceID": {
            "value": "[if(contains(parameters('disasterRecoveryConfigs'), 'partnerNamespace'), parameters('disasterRecoveryConfigs').partnerNamespace, '')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "namespaceName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the parent Service Bus Namespace for the Service Bus Queue."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The name of the disaster recovery config"
              }
            },
            "alternateName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Primary/Secondary eventhub namespace name, which is part of GEO DR pairing"
              }
            },
            "partnerNamespaceResourceID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the Primary/Secondary event hub namespace name, which is part of GEO DR pairing"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs",
              "apiVersion": "2017-04-01",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "alternateName": "[parameters('alternateName')]",
                "partnerNamespace": "[parameters('partnerNamespaceResourceID')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the disaster recovery config."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces/disasterRecoveryConfigs', parameters('namespaceName'), parameters('name'))]",
              "metadata": {
                "description": "The Resource ID of the disaster recovery config."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the disaster recovery config was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('migrationConfigurations')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-MigrationConfigurations', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]"
          },
          "name": {
            "value": "[if(contains(parameters('migrationConfigurations'), 'name'), parameters('migrationConfigurations').name, '$default')]"
          },
          "postMigrationName": {
            "value": "[parameters('migrationConfigurations').postMigrationName]"
          },
          "targetNamespaceResourceId": {
            "value": "[parameters('migrationConfigurations').targetNamespace]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "namespaceName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the parent Service Bus Namespace for the Service Bus Queue."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "$default",
              "metadata": {
                "description": "Optional. The name of the migration configuration"
              }
            },
            "postMigrationName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name to access Standard Namespace after migration"
              }
            },
            "targetNamespaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Existing premium Namespace resource ID which has no entities, will be used for migration"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces/migrationConfigurations",
              "apiVersion": "2017-04-01",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "targetNamespace": "[parameters('targetNamespaceResourceId')]",
                "postMigrationName": "[parameters('postMigrationName')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the migration configuration."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces/migrationConfigurations', parameters('namespaceName'), parameters('name'))]",
              "metadata": {
                "description": "The Resource ID of the migration configuration"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the migration configuration was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "copy": {
        "name": "serviceBusNamespace_virtualNetworkRules",
        "count": "[length(parameters('virtualNetworkRules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-VirtualNetworkRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]"
          },
          "name": {
            "value": "[last(split(parameters('virtualNetworkRules')[copyIndex()], '/'))]"
          },
          "virtualNetworkSubnetId": {
            "value": "[parameters('virtualNetworkRules')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "namespaceName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the parent Service Bus Namespace for the Service Bus Queue."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[format('{0}-vnr', parameters('namespaceName'))]",
              "metadata": {
                "description": "Optional. The name of the virtual network rule"
              }
            },
            "virtualNetworkSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of Virtual Network Subnet"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces/virtualnetworkrules",
              "apiVersion": "2018-01-01-preview",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the virtual network rule."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces/virtualnetworkrules', parameters('namespaceName'), parameters('name'))]",
              "metadata": {
                "description": "The Resource ID of the virtual network rule."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the virtual network rule was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "copy": {
        "name": "serviceBusNamespace_authorizationRules",
        "count": "[length(parameters('authorizationRules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AuthorizationRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]"
          },
          "name": {
            "value": "[parameters('authorizationRules')[copyIndex()].name]"
          },
          "rights": {
            "value": "[if(contains(parameters('authorizationRules')[copyIndex()], 'rights'), parameters('authorizationRules')[copyIndex()].rights, createArray())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "namespaceName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the parent Service Bus Namespace for the Service Bus Queue."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the authorization rule"
              }
            },
            "rights": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "Listen",
                "Manage",
                "Send"
              ],
              "metadata": {
                "description": "Optional. The rights associated with the rule."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces/AuthorizationRules",
              "apiVersion": "2017-04-01",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "rights": "[parameters('rights')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the authorization rule."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', parameters('namespaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the authorization rule."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the authorization rule was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "copy": {
        "name": "serviceBusNamespace_ipFilterRules",
        "count": "[length(parameters('ipFilterRules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-IpFilterRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]"
          },
          "name": {
            "value": "[if(contains(parameters('ipFilterRules')[copyIndex()], 'name'), parameters('ipFilterRules')[copyIndex()].name, parameters('ipFilterRules')[copyIndex()].filterName)]"
          },
          "action": {
            "value": "[parameters('ipFilterRules')[copyIndex()].action]"
          },
          "filterName": {
            "value": "[parameters('ipFilterRules')[copyIndex()].filterName]"
          },
          "ipMask": {
            "value": "[parameters('ipFilterRules')[copyIndex()].ipMask]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "namespaceName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the parent Service Bus Namespace for the Service Bus Queue."
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[parameters('filterName')]",
              "metadata": {
                "description": "Optional. The name of the ip filter rule"
              }
            },
            "action": {
              "type": "string",
              "allowedValues": [
                "Accept"
              ],
              "metadata": {
                "description": "Required. The IP Filter Action"
              }
            },
            "filterName": {
              "type": "string",
              "metadata": {
                "description": "Required. IP Filter name"
              }
            },
            "ipMask": {
              "type": "string",
              "metadata": {
                "description": "Required. IP Mask"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces/ipfilterrules",
              "apiVersion": "2018-01-01-preview",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "action": "[parameters('action')]",
                "filterName": "[parameters('filterName')]",
                "ipMask": "[parameters('ipMask')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the IP filter rule."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces/ipfilterrules', parameters('namespaceName'), parameters('name'))]",
              "metadata": {
                "description": "The Resource ID of the IP filter rule."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the IP filter rule was created in."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "copy": {
        "name": "serviceBusNamespace_queues",
        "count": "[length(parameters('queues'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-Queue-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]"
          },
          "name": {
            "value": "[parameters('queues')[copyIndex()].name]"
          },
          "authorizationRules": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'authorizationRules'), parameters('queues')[copyIndex()].authorizationRules, createArray(createObject('name', 'RootManageSharedAccessKey', 'rights', createArray('Listen', 'Manage', 'Send'))))]"
          },
          "deadLetteringOnMessageExpiration": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'deadLetteringOnMessageExpiration'), parameters('queues')[copyIndex()].deadLetteringOnMessageExpiration, true())]"
          },
          "defaultMessageTimeToLive": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'defaultMessageTimeToLive'), parameters('queues')[copyIndex()].defaultMessageTimeToLive, 'P14D')]"
          },
          "duplicateDetectionHistoryTimeWindow": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'duplicateDetectionHistoryTimeWindow'), parameters('queues')[copyIndex()].duplicateDetectionHistoryTimeWindow, 'PT10M')]"
          },
          "enableBatchedOperations": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'enableBatchedOperations'), parameters('queues')[copyIndex()].enableBatchedOperations, true())]"
          },
          "enableExpress": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'enableExpress'), parameters('queues')[copyIndex()].enableExpress, false())]"
          },
          "enablePartitioning": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'enablePartitioning'), parameters('queues')[copyIndex()].enablePartitioning, false())]"
          },
          "lock": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'lock'), parameters('queues')[copyIndex()].lock, 'NotSpecified')]"
          },
          "lockDuration": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'lockDuration'), parameters('queues')[copyIndex()].lockDuration, 'PT1M')]"
          },
          "maxDeliveryCount": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'maxDeliveryCount'), parameters('queues')[copyIndex()].maxDeliveryCount, 10)]"
          },
          "maxSizeInMegabytes": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'maxSizeInMegabytes'), parameters('queues')[copyIndex()].maxSizeInMegabytes, 1024)]"
          },
          "requiresDuplicateDetection": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'requiresDuplicateDetection'), parameters('queues')[copyIndex()].requiresDuplicateDetection, false())]"
          },
          "requiresSession": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'requiresSession'), parameters('queues')[copyIndex()].requiresSession, false())]"
          },
          "roleAssignments": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), parameters('queues')[copyIndex()].roleAssignments, createArray())]"
          },
          "status": {
            "value": "[if(contains(parameters('queues')[copyIndex()], 'status'), parameters('queues')[copyIndex()].status, 'Active')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "namespaceName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the parent Service Bus Namespace for the Service Bus Queue."
              }
            },
            "name": {
              "type": "string",
              "maxLength": 50,
              "minLength": 6,
              "metadata": {
                "description": "Required. Name of the Service Bus Queue."
              }
            },
            "lockDuration": {
              "type": "string",
              "defaultValue": "PT1M",
              "metadata": {
                "description": "Optional. ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute."
              }
            },
            "maxSizeInMegabytes": {
              "type": "int",
              "defaultValue": 1024,
              "metadata": {
                "description": "Optional. The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024."
              }
            },
            "requiresDuplicateDetection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A value indicating if this queue requires duplicate detection."
              }
            },
            "requiresSession": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A value that indicates whether the queue supports the concept of sessions."
              }
            },
            "defaultMessageTimeToLive": {
              "type": "string",
              "defaultValue": "P14D",
              "metadata": {
                "description": "Optional. ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself."
              }
            },
            "deadLetteringOnMessageExpiration": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. A value that indicates whether this queue has dead letter support when a message expires."
              }
            },
            "enableBatchedOperations": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Value that indicates whether server-side batched operations are enabled."
              }
            },
            "duplicateDetectionHistoryTimeWindow": {
              "type": "string",
              "defaultValue": "PT10M",
              "metadata": {
                "description": "Optional. ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes."
              }
            },
            "maxDeliveryCount": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Optional. The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10."
              }
            },
            "status": {
              "type": "string",
              "defaultValue": "Active",
              "allowedValues": [
                "Active",
                "Disabled",
                "Restoring",
                "SendDisabled",
                "ReceiveDisabled",
                "Creating",
                "Deleting",
                "Renaming",
                "Unknown"
              ],
              "metadata": {
                "description": "Optional. Enumerates the possible values for the status of a messaging entity. - Active, Disabled, Restoring, SendDisabled, ReceiveDisabled, Creating, Deleting, Renaming, Unknown"
              }
            },
            "enablePartitioning": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A value that indicates whether the queue is to be partitioned across multiple message brokers."
              }
            },
            "enableExpress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage."
              }
            },
            "authorizationRules": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "RootManageSharedAccessKey",
                  "properties": {
                    "rights": [
                      "Listen",
                      "Manage",
                      "Send"
                    ]
                  }
                }
              ],
              "metadata": {
                "description": "Optional. Authorization Rules for the Service Bus Queue"
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "roleAssignments": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ServiceBus/namespaces/queues",
              "apiVersion": "2021-06-01-preview",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "lockDuration": "[parameters('lockDuration')]",
                "maxSizeInMegabytes": "[parameters('maxSizeInMegabytes')]",
                "requiresDuplicateDetection": "[parameters('requiresDuplicateDetection')]",
                "requiresSession": "[parameters('requiresSession')]",
                "defaultMessageTimeToLive": "[parameters('defaultMessageTimeToLive')]",
                "deadLetteringOnMessageExpiration": "[parameters('deadLetteringOnMessageExpiration')]",
                "enableBatchedOperations": "[parameters('enableBatchedOperations')]",
                "duplicateDetectionHistoryTimeWindow": "[parameters('duplicateDetectionHistoryTimeWindow')]",
                "maxDeliveryCount": "[parameters('maxDeliveryCount')]",
                "status": "[parameters('status')]",
                "enablePartitioning": "[parameters('enablePartitioning')]",
                "enableExpress": "[parameters('enableExpress')]"
              }
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2017-04-01",
              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}/queues/{1}', parameters('namespaceName'), parameters('name'))]",
              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            {
              "copy": {
                "name": "queue_authorizationRules",
                "count": "[length(parameters('authorizationRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-AuthRule-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "namespaceName": {
                    "value": "[parameters('namespaceName')]"
                  },
                  "queueName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('authorizationRules')[copyIndex()].name]"
                  },
                  "rights": {
                    "value": "[if(contains(parameters('authorizationRules')[copyIndex()], 'rights'), parameters('authorizationRules')[copyIndex()].rights, createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the service bus namepace queue"
                      }
                    },
                    "namespaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent service bus namespace"
                      }
                    },
                    "queueName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent service bus namespace queue"
                      }
                    },
                    "rights": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "Listen",
                        "Manage",
                        "Send"
                      ],
                      "metadata": {
                        "description": "Optional. The rights associated with the rule."
                      }
                    },
                    "cuaId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ServiceBus/namespaces/queues/authorizationRules",
                      "apiVersion": "2017-04-01",
                      "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('queueName'), parameters('name'))]",
                      "properties": {
                        "rights": "[parameters('rights')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('cuaId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('pid-{0}', parameters('cuaId'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {},
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": []
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the authorization rule."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ServiceBus/namespaces/queues/authorizationRules', parameters('namespaceName'), parameters('queueName'), parameters('name'))]",
                      "metadata": {
                        "description": "The Resource ID of the authorization rule."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the Resource Group the authorization rule was created in."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name'))]"
              ]
            },
            {
              "copy": {
                "name": "queue_rbac",
                "count": "[length(parameters('roleAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-rbac-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "principalIds": {
                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "principalIds": {
                      "type": "array"
                    },
                    "roleDefinitionIdOrName": {
                      "type": "string"
                    },
                    "resourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
                      "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
                      "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                      "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                      "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roleAssigment",
                        "count": "[length(parameters('principalIds'))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2021-04-01-preview",
                      "scope": "[format('Microsoft.ServiceBus/namespaces/{0}/queues/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                      "name": "[guid(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                        "principalId": "[parameters('principalIds')[copyIndex()]]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed queue"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ServiceBus/namespaces/queues', parameters('namespaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed queue"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed queue"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "copy": {
        "name": "serviceBusNamespace_privateEndpoints",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointResourceId": {
            "value": "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
          },
          "privateEndpointVnetLocation": {
            "value": "[reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location]"
          },
          "privateEndpoint": {
            "value": "[parameters('privateEndpoints')[copyIndex()]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "privateEndpointResourceId": {
              "type": "string"
            },
            "privateEndpointVnetLocation": {
              "type": "string"
            },
            "privateEndpoint": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
            "privateEndpoint_var": {
              "name": "[if(contains(parameters('privateEndpoint'), 'name'), if(empty(parameters('privateEndpoint').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpoint').service), parameters('privateEndpoint').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpoint').service))]",
              "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
              "service": [
                "[parameters('privateEndpoint').service]"
              ],
              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'), if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds), createArray(), parameters('privateEndpoint').privateDnsZoneResourceIds), createArray())]",
              "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'), if(empty(parameters('privateEndpoint').customDnsConfigs), null(), parameters('privateEndpoint').customDnsConfigs), null())]"
            }
          },
          "resources": [
            {
              "condition": "[not(empty(variables('privateEndpoint_var').privateDnsZoneResourceIds))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', variables('privateEndpoint_var').name, 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds)))]",
                    "input": {
                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds))[copyIndex('privateDnsZoneConfigs')]], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[range(0, length(variables('privateEndpoint_var').privateDnsZoneResourceIds))[copyIndex('privateDnsZoneConfigs')]]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "name": "[variables('privateEndpoint_var').name]",
              "location": "[parameters('privateEndpointVnetLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint_var').name]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                      "groupIds": "[variables('privateEndpoint_var').service]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                },
                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    },
    {
      "copy": {
        "name": "serviceBusNamespace_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-rbac-{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalIds": {
              "type": "array"
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "resourceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Azure Service Bus Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
              "Azure Service Bus Data Receiver": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]",
              "Azure Service Bus Data Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "scope": "[format('Microsoft.ServiceBus/namespaces/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]"
      ]
    }
  ],
  "outputs": {
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName')))]",
      "metadata": {
        "description": "The resource ID of the deployed service bus namespace"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group of the deployed service bus namespace"
      }
    },
    "name": {
      "type": "string",
      "value": "[if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))]",
      "metadata": {
        "description": "The name of the deployed service bus namespace"
      }
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))), '2021-06-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ServiceBus/namespaces', if(not(empty(parameters('name'))), parameters('name'), variables('uniqueServiceBusNamespaceName'))), '2021-06-01-preview', 'full').identity.principalId, '')]",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      }
    }
  }
}
