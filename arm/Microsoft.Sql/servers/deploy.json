{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "administratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Required. Administrator username for the server."
      }
    },
    "administratorLoginPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Required. The administrator login password."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the server."
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
      }
    },
    "databases": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The databases to create in the server"
      }
    },
    "firewallRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The firewall rules to create in the server"
      }
    },
    "securityAlertPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The security alert policies to create in the server"
      }
    }
  },
  "variables": {
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2021-05-01-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "version": "12.0"
      }
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Sql/servers/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "server_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-Sql-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalIds": {
              "type": "array"
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "resourceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Reservation Purchaser": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
              "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "scope": "[format('Microsoft.Sql/servers/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "server_databases",
        "count": "[length(parameters('databases'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-Sql-DB-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('databases')[copyIndex()].name]"
          },
          "serverName": {
            "value": "[parameters('name')]"
          },
          "maxSizeBytes": {
            "value": "[parameters('databases')[copyIndex()].maxSizeBytes]"
          },
          "tier": {
            "value": "[parameters('databases')[copyIndex()].tier]"
          },
          "skuName": {
            "value": "[parameters('databases')[copyIndex()].skuName]"
          },
          "collation": {
            "value": "[parameters('databases')[copyIndex()].collation]"
          },
          "autoPauseDelay": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'autoPauseDelay'), parameters('databases')[copyIndex()].autoPauseDelay, '')]"
          },
          "diagnosticLogsRetentionInDays": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticLogsRetentionInDays'), parameters('databases')[copyIndex()].diagnosticLogsRetentionInDays, 365)]"
          },
          "diagnosticStorageAccountId": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticStorageAccountId'), parameters('databases')[copyIndex()].diagnosticStorageAccountId, '')]"
          },
          "diagnosticEventHubAuthorizationRuleId": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticEventHubAuthorizationRuleId'), parameters('databases')[copyIndex()].diagnosticEventHubAuthorizationRuleId, '')]"
          },
          "diagnosticEventHubName": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticEventHubName'), parameters('databases')[copyIndex()].diagnosticEventHubName, '')]"
          },
          "isLedgerOn": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'isLedgerOn'), parameters('databases')[copyIndex()].isLedgerOn, false())]"
          },
          "location": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'location'), parameters('databases')[copyIndex()].location, reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2021-05-01-preview', 'full').location)]"
          },
          "logsToEnable": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'logsToEnable'), parameters('databases')[copyIndex()].logsToEnable, createArray())]"
          },
          "licenseType": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'licenseType'), parameters('databases')[copyIndex()].licenseType, '')]"
          },
          "maintenanceConfigurationId": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'maintenanceConfigurationId'), parameters('databases')[copyIndex()].maintenanceConfigurationId, '')]"
          },
          "minCapacity": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'minCapacity'), parameters('databases')[copyIndex()].minCapacity, '')]"
          },
          "metricsToEnable": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'metricsToEnable'), parameters('databases')[copyIndex()].metricsToEnable, createArray())]"
          },
          "highAvailabilityReplicaCount": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'highAvailabilityReplicaCount'), parameters('databases')[copyIndex()].highAvailabilityReplicaCount, 0)]"
          },
          "readScale": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'readScale'), parameters('databases')[copyIndex()].readScale, 'Disabled')]"
          },
          "requestedBackupStorageRedundancy": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'requestedBackupStorageRedundancy'), parameters('databases')[copyIndex()].requestedBackupStorageRedundancy, '')]"
          },
          "sampleName": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'sampleName'), parameters('databases')[copyIndex()].sampleName, '')]"
          },
          "tags": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'tags'), parameters('databases')[copyIndex()].tags, createObject())]"
          },
          "diagnosticWorkspaceId": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'diagnosticWorkspaceId'), parameters('databases')[copyIndex()].diagnosticWorkspaceId, '')]"
          },
          "zoneRedundant": {
            "value": "[if(contains(parameters('databases')[copyIndex()], 'zoneRedundant'), parameters('databases')[copyIndex()].zoneRedundant, false())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "collation": {
              "type": "string",
              "metadata": {
                "description": "Optional. The collation of the database."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the database."
              }
            },
            "tier": {
              "type": "string",
              "metadata": {
                "description": "Optional. The tier or edition of the particular SKU."
              }
            },
            "skuName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the SKU."
              }
            },
            "maxSizeBytes": {
              "type": "int",
              "metadata": {
                "description": "Optional. The max size of the database expressed in bytes."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Name of SQL Server"
              }
            },
            "sampleName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the sample schema to apply when creating this database."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether or not this database is zone redundant."
              }
            },
            "licenseType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The license type to apply for this database."
              }
            },
            "readScale": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The state of read-only routing."
              }
            },
            "highAvailabilityReplicaCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The number of readonly secondary replicas associated with the database."
              }
            },
            "minCapacity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Minimal capacity that database will always have allocated."
              }
            },
            "autoPauseDelay": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Time in minutes after which database is automatically paused."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "diagnosticWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
              }
            },
            "diagnosticEventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "diagnosticEventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "SQLInsights",
                "AutomaticTuning",
                "QueryStoreRuntimeStatistics",
                "QueryStoreWaitStatistics",
                "Errors",
                "DatabaseWaitStatistics",
                "Timouts",
                "Blocks",
                "Deadlocks"
              ],
              "allowedValues": [
                "SQLInsights",
                "AutomaticTuning",
                "QueryStoreRuntimeStatistics",
                "QueryStoreWaitStatistics",
                "Errors",
                "DatabaseWaitStatistics",
                "Timouts",
                "Blocks",
                "Deadlocks"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "Basic"
              ],
              "allowedValues": [
                "Basic"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            },
            "requestedBackupStorageRedundancy": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "Geo",
                "Local",
                "Zone",
                ""
              ],
              "metadata": {
                "description": "Optional. The storage account type to be used to store backups for this database."
              }
            },
            "isLedgerOn": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created."
              }
            },
            "maintenanceConfigurationId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Maintenance configuration ID assigned to the database. This configuration defines the period when the maintenance updates will occur."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2021-02-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "collation": "[parameters('collation')]",
                "maxSizeBytes": "[parameters('maxSizeBytes')]",
                "sampleName": "[parameters('sampleName')]",
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "licenseType": "[parameters('licenseType')]",
                "readScale": "[parameters('readScale')]",
                "minCapacity": "[if(not(empty(parameters('minCapacity'))), json(parameters('minCapacity')), 0)]",
                "autoPauseDelay": "[if(not(empty(parameters('autoPauseDelay'))), json(parameters('autoPauseDelay')), 0)]",
                "highAvailabilityReplicaCount": "[parameters('highAvailabilityReplicaCount')]",
                "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]",
                "isLedgerOn": "[parameters('isLedgerOn')]",
                "maintenanceConfigurationId": "[if(not(empty(parameters('maintenanceConfigurationId'))), parameters('maintenanceConfigurationId'), null())]"
              },
              "sku": {
                "name": "[parameters('skuName')]",
                "tier": "[parameters('tier')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('serverName'), parameters('name'))]",
              "name": "[format('{0}-diagnosticSettings', last(split(parameters('name'), '/')))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed database"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('serverName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed database"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resourceGroup of the deployed database"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "server_firewallRules",
        "count": "[length(parameters('firewallRules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-Sql-FirewallRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('firewallRules')[copyIndex()].name]"
          },
          "serverName": {
            "value": "[parameters('name')]"
          },
          "endIpAddress": {
            "value": "[if(contains(parameters('firewallRules')[copyIndex()], 'endIpAddress'), parameters('firewallRules')[copyIndex()].endIpAddress, '0.0.0.0')]"
          },
          "startIpAddress": {
            "value": "[if(contains(parameters('firewallRules')[copyIndex()], 'startIpAddress'), parameters('firewallRules')[copyIndex()].startIpAddress, '0.0.0.0')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Server Firewall Rule."
              }
            },
            "endIpAddress": {
              "type": "string",
              "defaultValue": "0.0.0.0",
              "metadata": {
                "description": "Optional. The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses."
              }
            },
            "startIpAddress": {
              "type": "string",
              "defaultValue": "0.0.0.0",
              "metadata": {
                "description": "Optional. The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Name of SQL Server"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/firewallRules",
              "apiVersion": "2021-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "endIpAddress": "[parameters('endIpAddress')]",
                "startIpAddress": "[parameters('startIpAddress')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed firewall rule"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/firewallRules', parameters('serverName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed firewall rule"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resourceGroup of the deployed firewall rule"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "server_securityAlertPolicies",
        "count": "[length(parameters('securityAlertPolicies'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-Sql-SecAlertPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('securityAlertPolicies')[copyIndex()].name]"
          },
          "serverName": {
            "value": "[parameters('name')]"
          },
          "disabledAlerts": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'disabledAlerts'), parameters('securityAlertPolicies')[copyIndex()].disabledAlerts, createArray())]"
          },
          "emailAccountAdmins": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'emailAccountAdmins'), parameters('securityAlertPolicies')[copyIndex()].emailAccountAdmins, false())]"
          },
          "emailAddresses": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'emailAddresses'), parameters('securityAlertPolicies')[copyIndex()].emailAddresses, createArray())]"
          },
          "retentionDays": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'retentionDays'), parameters('securityAlertPolicies')[copyIndex()].retentionDays, 0)]"
          },
          "state": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'state'), parameters('securityAlertPolicies')[copyIndex()].state, 'Disabled')]"
          },
          "storageAccountAccessKey": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'storageAccountAccessKey'), parameters('securityAlertPolicies')[copyIndex()].storageAccountAccessKey, '')]"
          },
          "storageEndpoint": {
            "value": "[if(contains(parameters('securityAlertPolicies')[copyIndex()], 'storageEndpoint'), parameters('securityAlertPolicies')[copyIndex()].storageEndpoint, '')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Security Alert Policy."
              }
            },
            "disabledAlerts": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force."
              }
            },
            "emailAccountAdmins": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies that the alert is sent to the account administrators."
              }
            },
            "emailAddresses": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies an array of email addresses to which the alert is sent."
              }
            },
            "retentionDays": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days to keep in the Threat Detection audit logs."
              }
            },
            "state": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database."
              }
            },
            "storageAccountAccessKey": {
              "type": "secureString",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the identifier key of the Threat Detection audit storage account.."
              }
            },
            "storageEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Specifies the blob storage endpoint (e.g. https://mystorageaccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs."
              }
            },
            "serverName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Name of SQL Server"
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/securityAlertPolicies",
              "apiVersion": "2021-05-01-preview",
              "name": "[format('{0}/{1}', parameters('serverName'), parameters('name'))]",
              "properties": {
                "disabledAlerts": "[parameters('disabledAlerts')]",
                "emailAccountAdmins": "[parameters('emailAccountAdmins')]",
                "emailAddresses": "[parameters('emailAddresses')]",
                "retentionDays": "[parameters('retentionDays')]",
                "state": "[parameters('state')]",
                "storageAccountAccessKey": "[if(empty(parameters('storageAccountAccessKey')), null(), parameters('storageAccountAccessKey'))]",
                "storageEndpoint": "[if(empty(parameters('storageEndpoint')), null(), parameters('storageEndpoint'))]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed security alert policy"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', parameters('serverName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed security alert policy"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resourceGroup of the deployed security alert policy"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the deployed SQL server"
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Sql/servers', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the deployed SQL server"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resourceGroup of the deployed SQL server"
      }
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2021-05-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2021-05-01-preview', 'full').identity.principalId, '')]",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      }
    }
  }
}
