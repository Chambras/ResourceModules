{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the Automation Account."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Basic",
      "metadata": {
        "description": "Optional. SKU name of the account."
      },
      "allowedValues": [
        "Free",
        "Basic"
      ]
    },
    "modules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of modules to be created in the automation account."
      }
    },
    "runbooks": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of runbooks to be created in the automation account."
      }
    },
    "schedules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of schedules to be created in the automation account."
      }
    },
    "jobSchedules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of jobSchedules to be created in the automation account."
      }
    },
    "variables": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of variables to be created in the automation account."
      }
    },
    "linkedWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. ID of the log analytics workspace to be linked to the deployed automation account."
      }
    },
    "gallerySolutions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of gallerySolutions to be created in the linked log analytics workspace"
      }
    },
    "softwareUpdateConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of softwareUpdateConfigurations to be created in the automation account"
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Configuration Details for private endpoints."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      },
      "maxValue": 365,
      "minValue": 0
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the Automation Account resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered."
      }
    },
    "logsToEnable": {
      "type": "array",
      "defaultValue": [
        "JobLogs",
        "JobStreams",
        "DscNodeStatus"
      ],
      "allowedValues": [
        "JobLogs",
        "JobStreams",
        "DscNodeStatus"
      ],
      "metadata": {
        "description": "Optional. The name of logs that will be streamed."
      }
    },
    "metricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('logsToEnable'))]",
        "input": {
          "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('metricsToEnable'))]",
        "input": {
          "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "type": "Microsoft.Automation/automationAccounts",
      "apiVersion": "2020-01-13-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "[parameters('skuName')]"
        }
      },
      "identity": "[variables('identity')]"
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('name'))]",
      "name": "[format('{0}-AutoAccount-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Automation/automationAccounts/{0}', parameters('name'))]",
      "name": "[format('{0}-AutoAccount-diagnosticSettings', parameters('name'))]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "copy": {
        "name": "automationAccount_modules",
        "count": "[length(parameters('modules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-Module-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('modules')[copyIndex()].name]"
          },
          "automationAccountName": {
            "value": "[parameters('name')]"
          },
          "version": {
            "value": "[parameters('modules')[copyIndex()].version]"
          },
          "uri": {
            "value": "[parameters('modules')[copyIndex()].uri]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Automation Account module."
              }
            },
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the parent Automation Account."
              }
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "Required. Module package uri, e.g. https://www.powershellgallery.com/api/v2/package."
              }
            },
            "version": {
              "type": "string",
              "defaultValue": "latest",
              "metadata": {
                "description": "Optional. Module version or specify latest to get the latest version."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the Automation Account resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts/modules",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "contentLink": {
                  "uri": "[if(not(equals(parameters('version'), 'latest')), format('{0}/{1}/{2}', parameters('uri'), parameters('name'), parameters('version')), format('{0}/{1}', parameters('uri'), parameters('name')))]",
                  "version": "[if(not(equals(parameters('version'), 'latest')), parameters('version'), null())]"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed module"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed module"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed module"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "automationAccount_schedules",
        "count": "[length(parameters('schedules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-Schedule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('schedules')[copyIndex()].name]"
          },
          "automationAccountName": {
            "value": "[parameters('name')]"
          },
          "advancedSchedule": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'advancedSchedule'), parameters('schedules')[copyIndex()].advancedSchedule, null())]"
          },
          "scheduleDescription": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'description'), parameters('schedules')[copyIndex()].description, '')]"
          },
          "expiryTime": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'expiryTime'), parameters('schedules')[copyIndex()].expiryTime, '')]"
          },
          "frequency": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'frequency'), parameters('schedules')[copyIndex()].frequency, 'OneTime')]"
          },
          "interval": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'interval'), parameters('schedules')[copyIndex()].interval, 0)]"
          },
          "startTime": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'startTime'), parameters('schedules')[copyIndex()].startTime, '')]"
          },
          "timeZone": {
            "value": "[if(contains(parameters('schedules')[copyIndex()], 'timeZone'), parameters('schedules')[copyIndex()].timeZone, '')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Automation Account schedule."
              }
            },
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the parent Automation Account."
              }
            },
            "advancedSchedule": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "monthDays": "Days of the month that the job should execute on. Must be between 1 and 31.",
                "monthlyOccurrences": "Occurrences of days within a month.",
                "weekDays": "Days of the week that the job should execute on.",
                "description": "Optional. The properties of the create Advanced Schedule."
              }
            },
            "scheduleDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the schedule."
              }
            },
            "expiryTime": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end time of the schedule."
              }
            },
            "frequency": {
              "type": "string",
              "defaultValue": "OneTime",
              "metadata": {
                "description": "Optional. The frequency of the schedule."
              },
              "allowedValues": [
                "Day",
                "Hour",
                "Minute",
                "Month",
                "OneTime",
                "Week"
              ]
            },
            "interval": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Anything"
              }
            },
            "startTime": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The start time of the schedule."
              }
            },
            "timeZone": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The time zone of the schedule."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Optional. Time used as a basis for e.g. the schedule start date."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts/schedules",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "properties": {
                "advancedSchedule": "[if(not(empty(parameters('advancedSchedule'))), parameters('advancedSchedule'), null())]",
                "description": "[if(not(empty(parameters('scheduleDescription'))), parameters('scheduleDescription'), null())]",
                "expiryTime": "[if(not(empty(parameters('expiryTime'))), parameters('expiryTime'), null())]",
                "frequency": "[if(not(empty(parameters('frequency'))), parameters('frequency'), 'OneTime')]",
                "interval": "[if(not(equals(parameters('interval'), 0)), parameters('interval'), null())]",
                "startTime": "[if(not(empty(parameters('startTime'))), parameters('startTime'), dateTimeAdd(parameters('baseTime'), 'PT10M'))]",
                "timeZone": "[if(not(empty(parameters('timeZone'))), parameters('timeZone'), null())]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed schedule"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Automation/automationAccounts/schedules', parameters('automationAccountName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed schedule"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed schedule"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "automationAccount_runbooks",
        "count": "[length(parameters('runbooks'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-Runbook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('runbooks')[copyIndex()].name]"
          },
          "automationAccountName": {
            "value": "[parameters('name')]"
          },
          "runbookType": {
            "value": "[parameters('runbooks')[copyIndex()].runbookType]"
          },
          "runbookDescription": {
            "value": "[if(contains(parameters('runbooks')[copyIndex()], 'description'), parameters('runbooks')[copyIndex()].description, '')]"
          },
          "uri": {
            "value": "[if(contains(parameters('runbooks')[copyIndex()], 'uri'), parameters('runbooks')[copyIndex()].uri, '')]"
          },
          "version": {
            "value": "[if(contains(parameters('runbooks')[copyIndex()], 'version'), parameters('runbooks')[copyIndex()].version, '')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Automation Account runbook."
              }
            },
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the parent Automation Account."
              }
            },
            "runbookType": {
              "type": "string",
              "metadata": {
                "description": "Required. The type of the runbook."
              },
              "allowedValues": [
                "Graph",
                "GraphPowerShell",
                "GraphPowerShellWorkflow",
                "PowerShell",
                "PowerShellWorkflow"
              ]
            },
            "runbookDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the runbook."
              }
            },
            "uri": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The uri of the runbook content."
              }
            },
            "version": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The version of the runbook content."
              }
            },
            "scriptStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the runbook storage account."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Optional. Time used as a basis for e.g. the schedule start date."
              }
            },
            "sasTokenValidityLength": {
              "type": "string",
              "defaultValue": "PT8H",
              "metadata": {
                "description": "Optional. SAS token validity length. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the Automation Account resource."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered."
              }
            }
          },
          "variables": {
            "accountSasProperties": {
              "signedServices": "b",
              "signedPermission": "r",
              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
              "signedResourceTypes": "o",
              "signedProtocol": "https"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts/runbooks",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "runbookType": "[parameters('runbookType')]",
                "description": "[parameters('runbookDescription')]",
                "publishContentLink": "[if(not(empty(parameters('uri'))), if(empty(parameters('uri')), null(), createObject('uri', if(not(empty(parameters('uri'))), if(empty(parameters('scriptStorageAccountId')), parameters('uri'), format('{0}{1}', parameters('uri'), listAccountSas(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('scriptStorageAccountId'), '/')[2], split(parameters('scriptStorageAccountId'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(parameters('scriptStorageAccountId'), '/'))), '2021-04-01', variables('accountSasProperties')).accountSasToken)), null()), 'version', if(not(empty(parameters('version'))), parameters('version'), null()))), null())]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed runbook"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Automation/automationAccounts/runbooks', parameters('automationAccountName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed runbook"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed runbook"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "automationAccount_jobSchedules",
        "count": "[length(parameters('jobSchedules'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-JobSchedule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "automationAccountName": {
            "value": "[parameters('name')]"
          },
          "runbookName": {
            "value": "[parameters('jobSchedules')[copyIndex()].runbookName]"
          },
          "scheduleName": {
            "value": "[parameters('jobSchedules')[copyIndex()].scheduleName]"
          },
          "parameters": {
            "value": "[if(contains(parameters('jobSchedules')[copyIndex()], 'parameters'), if(not(empty(parameters('jobSchedules')[copyIndex()].parameters)), parameters('jobSchedules')[copyIndex()].parameters, createObject()), createObject())]"
          },
          "runOn": {
            "value": "[if(contains(parameters('jobSchedules')[copyIndex()], 'runOn'), if(not(empty(parameters('jobSchedules')[copyIndex()].runOn)), parameters('jobSchedules')[copyIndex()].runOn, ''), '')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "defaultValue": "[newGuid()]",
              "metadata": {
                "description": "Optional. Name of the Automation Account job schedule. Must be a GUID. If not provided, a new GUID is generated."
              }
            },
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the parent Automation Account."
              }
            },
            "runbookName": {
              "type": "string",
              "metadata": {
                "description": "Required. The runbook property associated with the entity."
              }
            },
            "scheduleName": {
              "type": "string",
              "metadata": {
                "description": "Required. The schedule property associated with the entity."
              }
            },
            "parameters": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. List of job properties."
              }
            },
            "runOn": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The hybrid worker group that the scheduled job should run on."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts/jobSchedules",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "properties": {
                "parameters": "[parameters('parameters')]",
                "runbook": {
                  "name": "[parameters('runbookName')]"
                },
                "runOn": "[if(not(empty(parameters('runOn'))), parameters('runOn'), null())]",
                "schedule": {
                  "name": "[parameters('scheduleName')]"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed job schedule"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Automation/automationAccounts/jobSchedules', parameters('automationAccountName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed job schedule"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed job schedule"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]",
        "automationAccount_runbooks",
        "automationAccount_schedules"
      ]
    },
    {
      "copy": {
        "name": "automationAccount_variables",
        "count": "[length(parameters('variables'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-Variable-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "automationAccountName": {
            "value": "[parameters('name')]"
          },
          "name": {
            "value": "[parameters('variables')[copyIndex()].name]"
          },
          "description": {
            "value": "[if(contains(parameters('variables')[copyIndex()], 'description'), parameters('variables')[copyIndex()].description, '')]"
          },
          "value": {
            "value": "[parameters('variables')[copyIndex()].value]"
          },
          "isEncrypted": {
            "value": "[if(contains(parameters('variables')[copyIndex()], 'isEncrypted'), parameters('variables')[copyIndex()].isEncrypted, false())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the parent Automation Account"
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the variable."
              }
            },
            "value": {
              "type": "string",
              "metadata": {
                "description": "Required. The value of the variable."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the variable."
              }
            },
            "isEncrypted": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If the variable should be encrypted."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts/variables",
              "apiVersion": "2020-01-13-preview",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "properties": {
                "description": "[parameters('description')]",
                "isEncrypted": "[parameters('isEncrypted')]",
                "value": "[parameters('value')]"
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed variable"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Automation/automationAccounts/variables', parameters('automationAccountName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed variable"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed variable"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('linkedWorkspaceId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-LinkedService', uniqueString(deployment().name, parameters('location')))]",
      "subscriptionId": "[if(not(empty(parameters('linkedWorkspaceId'))), split(parameters('linkedWorkspaceId'), '/')[2], subscription().subscriptionId)]",
      "resourceGroup": "[if(not(empty(parameters('linkedWorkspaceId'))), split(parameters('linkedWorkspaceId'), '/')[4], resourceGroup().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "automation"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[last(split(parameters('linkedWorkspaceId'), '/'))]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the link"
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "resourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
              }
            },
            "writeAccessResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access. "
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags to configure in the resource."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
              "apiVersion": "2020-03-01-preview",
              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "tags": "[parameters('tags')]",
              "properties": {
                "resourceId": "[if(not(empty(parameters('resourceId'))), parameters('resourceId'), null())]",
                "writeAccessResourceId": "[if(not(empty(parameters('writeAccessResourceId'))), parameters('writeAccessResourceId'), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed linked service"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed linked service"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the linked service is deployed"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('linkedWorkspaceId')))]",
      "copy": {
        "name": "automationAccount_solutions",
        "count": "[length(parameters('gallerySolutions'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "subscriptionId": "[if(not(empty(parameters('linkedWorkspaceId'))), split(parameters('linkedWorkspaceId'), '/')[2], subscription().subscriptionId)]",
      "resourceGroup": "[if(not(empty(parameters('linkedWorkspaceId'))), split(parameters('linkedWorkspaceId'), '/')[4], resourceGroup().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('gallerySolutions')[copyIndex()]]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[last(split(parameters('linkedWorkspaceId'), '/'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the solution"
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "product": {
              "type": "string",
              "defaultValue": "OMSGallery",
              "metadata": {
                "description": "Optional. The product of the deployed solution. For gallery solution, it is OMSGallery."
              }
            },
            "publisher": {
              "type": "string",
              "defaultValue": "Microsoft",
              "metadata": {
                "description": "Optional. The publisher name of the deployed solution. For gallery solution, it is Microsoft."
              }
            }
          },
          "variables": {
            "solutionName": "[format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('solutionName')]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              },
              "plan": {
                "name": "[variables('solutionName')]",
                "promotionCode": "",
                "product": "[format('{0}/{1}', parameters('product'), parameters('name'))]",
                "publisher": "[parameters('publisher')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('solutionName')]",
              "metadata": {
                "description": "The name of the deployed solution"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]",
              "metadata": {
                "description": "The resource ID of the deployed solution"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the solution is deployed"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', if(not(empty(parameters('linkedWorkspaceId'))), split(parameters('linkedWorkspaceId'), '/')[2], subscription().subscriptionId), if(not(empty(parameters('linkedWorkspaceId'))), split(parameters('linkedWorkspaceId'), '/')[4], resourceGroup().name)), 'Microsoft.Resources/deployments', format('{0}-AutoAccount-LinkedService', uniqueString(deployment().name, parameters('location'))))]"
      ]
    },
    {
      "copy": {
        "name": "automationAccount_softwareUpdateConfigurations",
        "count": "[length(parameters('softwareUpdateConfigurations'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-SwUpdateConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].name]"
          },
          "automationAccountName": {
            "value": "[parameters('name')]"
          },
          "frequency": {
            "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].frequency]"
          },
          "operatingSystem": {
            "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].operatingSystem]"
          },
          "rebootSetting": {
            "value": "[parameters('softwareUpdateConfigurations')[copyIndex()].rebootSetting]"
          },
          "azureVirtualMachines": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'azureVirtualMachines'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].azureVirtualMachines)), parameters('softwareUpdateConfigurations')[copyIndex()].azureVirtualMachines, createArray()), createArray())]"
          },
          "excludeUpdates": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'excludeUpdates'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].excludeUpdates)), parameters('softwareUpdateConfigurations')[copyIndex()].excludeUpdates, createArray()), createArray())]"
          },
          "expiryTime": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'expiryTime'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].expiryTime)), parameters('softwareUpdateConfigurations')[copyIndex()].expiryTime, ''), '')]"
          },
          "expiryTimeOffsetMinutes": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'expiryTimeOffsetMinutes'), parameters('softwareUpdateConfigurations')[copyIndex()].expiryTimeOffsetMinute, 0)]"
          },
          "includeUpdates": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'includeUpdates'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].includeUpdates)), parameters('softwareUpdateConfigurations')[copyIndex()].includeUpdates, createArray()), createArray())]"
          },
          "interval": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'interval'), parameters('softwareUpdateConfigurations')[copyIndex()].interval, 1)]"
          },
          "isEnabled": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'isEnabled'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].isEnabled)), parameters('softwareUpdateConfigurations')[copyIndex()].isEnabled, true()), true())]"
          },
          "maintenanceWindow": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'maintenanceWindow'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].maintenanceWindow)), parameters('softwareUpdateConfigurations')[copyIndex()].maintenanceWindow, 'PT2H'), 'PT2H')]"
          },
          "monthDays": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'monthDays'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].monthDays)), parameters('softwareUpdateConfigurations')[copyIndex()].monthDays, createArray()), createArray())]"
          },
          "monthlyOccurrences": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'monthlyOccurrences'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].monthlyOccurrences)), parameters('softwareUpdateConfigurations')[copyIndex()].monthlyOccurrences, createArray()), createArray())]"
          },
          "nextRun": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nextRun'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].nextRun)), parameters('softwareUpdateConfigurations')[copyIndex()].nextRun, ''), '')]"
          },
          "nextRunOffsetMinutes": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nextRunOffsetMinutes'), parameters('softwareUpdateConfigurations')[copyIndex()].nextRunOffsetMinutes, 0)]"
          },
          "nonAzureComputerNames": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nonAzureComputerNames'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].nonAzureComputerNames)), parameters('softwareUpdateConfigurations')[copyIndex()].nonAzureComputerNames, createArray()), createArray())]"
          },
          "nonAzureQueries": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'nonAzureQueries'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].nonAzureQueries)), parameters('softwareUpdateConfigurations')[copyIndex()].nonAzureQueries, createArray()), createArray())]"
          },
          "postTaskParameters": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'postTaskParameters'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].postTaskParameters)), parameters('softwareUpdateConfigurations')[copyIndex()].postTaskParameters, createObject()), createObject())]"
          },
          "postTaskSource": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'postTaskSource'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].postTaskSource)), parameters('softwareUpdateConfigurations')[copyIndex()].postTaskSource, ''), '')]"
          },
          "preTaskParameters": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'preTaskParameters'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].preTaskParameters)), parameters('softwareUpdateConfigurations')[copyIndex()].preTaskParameters, createObject()), createObject())]"
          },
          "preTaskSource": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'preTaskSource'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].preTaskSource)), parameters('softwareUpdateConfigurations')[copyIndex()].preTaskSource, ''), '')]"
          },
          "scheduleDescription": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scheduleDescription'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].scheduleDescription)), parameters('softwareUpdateConfigurations')[copyIndex()].scheduleDescription, ''), '')]"
          },
          "scopeByLocations": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByLocations'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].scopeByLocations)), parameters('softwareUpdateConfigurations')[copyIndex()].scopeByLocations, createArray()), createArray())]"
          },
          "scopeByResources": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByResources'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].scopeByResources)), parameters('softwareUpdateConfigurations')[copyIndex()].scopeByResources, createArray(subscription().id)), createArray(subscription().id))]"
          },
          "scopeByTags": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByTags'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].scopeByTags)), parameters('softwareUpdateConfigurations')[copyIndex()].scopeByTags, createObject()), createObject())]"
          },
          "scopeByTagsOperation": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'scopeByTagsOperation'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].scopeByTagsOperation)), parameters('softwareUpdateConfigurations')[copyIndex()].scopeByTagsOperation, 'All'), 'All')]"
          },
          "startTime": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'startTime'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].startTime)), parameters('softwareUpdateConfigurations')[copyIndex()].startTime, ''), '')]"
          },
          "timeZone": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'timeZone'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].timeZone)), parameters('softwareUpdateConfigurations')[copyIndex()].timeZone, 'UTC'), 'UTC')]"
          },
          "updateClassifications": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'updateClassifications'), if(not(empty(parameters('softwareUpdateConfigurations')[copyIndex()].updateClassifications)), parameters('softwareUpdateConfigurations')[copyIndex()].updateClassifications, createArray('Critical', 'Security')), createArray('Critical', 'Security'))]"
          },
          "weekDays": {
            "value": "[if(contains(parameters('softwareUpdateConfigurations')[copyIndex()], 'weekDays'), if(empty(parameters('softwareUpdateConfigurations')[copyIndex()].weekDays), parameters('softwareUpdateConfigurations')[copyIndex()].weekDays, createArray()), createArray())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Deployment schedule."
              }
            },
            "automationAccountName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the parent Automation Account"
              }
            },
            "operatingSystem": {
              "type": "string",
              "allowedValues": [
                "Windows",
                "Linux"
              ],
              "metadata": {
                "description": "Required. The operating system to be configured by the deployment schedule."
              }
            },
            "rebootSetting": {
              "type": "string",
              "allowedValues": [
                "IfRequired",
                "Never",
                "RebootOnly",
                "Always"
              ],
              "metadata": {
                "description": "Required. Reboot setting for the deployment schedule."
              }
            },
            "frequency": {
              "type": "string",
              "allowedValues": [
                "OneTime",
                "Hour",
                "Day",
                "Week",
                "Month"
              ],
              "metadata": {
                "description": "Required. The frequency of the deployment schedule. When using 'Hour', 'Day', 'Week' or 'Month', an interval needs to be provided."
              }
            },
            "maintenanceWindow": {
              "type": "string",
              "defaultValue": "PT2H",
              "metadata": {
                "description": "Optional. Maximum time allowed for the deployment schedule to run. Duration needs to be specified using the format PT[n]H[n]M[n]S as per ISO8601"
              }
            },
            "updateClassifications": {
              "type": "array",
              "defaultValue": [
                "Critical",
                "Security"
              ],
              "allowedValues": [
                "Critical",
                "Security",
                "UpdateRollup",
                "FeaturePack",
                "ServicePack",
                "Definition",
                "Tools",
                "Updates",
                "Other"
              ],
              "metadata": {
                "description": "Optional. Update classification included in the deployment schedule."
              }
            },
            "excludeUpdates": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. KB numbers or Linux packages excluded in the deployment schedule."
              }
            },
            "includeUpdates": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. KB numbers or Linux packages included in the deployment schedule."
              }
            },
            "scopeByResources": {
              "type": "array",
              "defaultValue": [
                "[subscription().id]"
              ],
              "metadata": {
                "description": "Optional. Specify the resources to scope the deployment schedule to."
              }
            },
            "scopeByTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specify tags to which to scope the deployment schedule to."
              }
            },
            "scopeByTagsOperation": {
              "type": "string",
              "defaultValue": "All",
              "allowedValues": [
                "All",
                "Any"
              ],
              "metadata": {
                "description": "Optional. Enables the scopeByTags to require All (Tag A and Tag B) or Any (Tag A or Tag B)."
              }
            },
            "scopeByLocations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specify locations to which to scope the deployment schedule to."
              }
            },
            "preTaskParameters": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Parameters provided to the task running before the deployment schedule."
              }
            },
            "preTaskSource": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The source of the task running before the deployment schedule."
              }
            },
            "postTaskParameters": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Parameters provided to the task running after the deployment schedule."
              }
            },
            "postTaskSource": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The source of the task running after the deployment schedule."
              }
            },
            "interval": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 100,
              "metadata": {
                "description": "Optional. The interval of the frequency for the deployment schedule. 1 Hour is every hour, 2 Day is every second day, etc."
              }
            },
            "isEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enables the deployment schedule."
              }
            },
            "timeZone": {
              "type": "string",
              "defaultValue": "UTC",
              "metadata": {
                "description": "Optional. Time zone for the deployment schedule. IANA ID or a Windows Time Zone ID."
              }
            },
            "nonAzureQueries": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of functions from a Log Analytics workspace, used to scope the deployment schedule."
              }
            },
            "azureVirtualMachines": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of azure resource IDs for azure virtual machines in scope for the deployment schedule."
              }
            },
            "nonAzureComputerNames": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of names of non-azure machines in scope for the deployment schedule."
              }
            },
            "weekDays": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
              ],
              "metadata": {
                "description": "Optional. Required when used with frequency 'Week'. Specified the day of the week to run the deployment schedule."
              }
            },
            "monthDays": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31
              ],
              "metadata": {
                "description": "Optional. Can be used with frequency 'Month'. Provides the specific days of the month to run the deployment schedule."
              }
            },
            "monthlyOccurrences": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Can be used with frequency 'Month'. Provides the pattern/cadence for running the deployment schedule in a month. Takes objects formed like this {occurance(int),day(string)}. Day is the name of the day to run the deployment schedule, the occurance specifies which occurance of that day to run the deployment schedule."
              }
            },
            "startTime": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The start time of the deployment schedule in ISO 8601 format. To specify a specific time use YYYY-MM-DDTHH:MM:SS, 2021-12-31T23:00:00. For schedules where we want to start the deployment as soon as possible, specify the time segment only in 24 hour format, HH:MM, 22:00."
              }
            },
            "expiryTime": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The end time of the deployment schedule in ISO 8601 format. YYYY-MM-DDTHH:MM:SS, 2021-12-31T23:00:00"
              }
            },
            "expiryTimeOffsetMinutes": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The expiry time's offset in minutes."
              }
            },
            "nextRun": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The next time the deployment schedule runs in ISO 8601 format. YYYY-MM-DDTHH:MM:SS, 2021-12-31T23:00:00"
              }
            },
            "nextRunOffsetMinutes": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The next run's offset in minutes."
              }
            },
            "scheduleDescription": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The schedules description."
              }
            },
            "baseTime": {
              "type": "string",
              "defaultValue": "[utcNow('u')]",
              "metadata": {
                "description": "Generated. Do not touch. Is used to provide the base time for time comparison for startTime. If startTime is specified in HH:MM format, baseTime is used to check if the provided startTime has passed, adding one day before setting the deployment schedule."
              }
            },
            "cuaId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
              }
            }
          },
          "variables": {
            "updateClassifications_var": "[format('{0}', replace(replace(replace(replace(string(parameters('updateClassifications')), ',', ', '), '[', ''), ']', ''), '\"', ''))]"
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts/softwareUpdateConfigurations",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('name'))]",
              "properties": {
                "updateConfiguration": {
                  "operatingSystem": "[parameters('operatingSystem')]",
                  "duration": "[parameters('maintenanceWindow')]",
                  "linux": "[if(equals(parameters('operatingSystem'), 'Linux'), createObject('excludedPackageNameMasks', parameters('excludeUpdates'), 'includedPackageNameMasks', parameters('includeUpdates'), 'includedPackageClassifications', variables('updateClassifications_var'), 'rebootSetting', parameters('rebootSetting')), null())]",
                  "windows": "[if(equals(parameters('operatingSystem'), 'Windows'), createObject('excludedKbNumbers', parameters('excludeUpdates'), 'includedKbNumbers', parameters('includeUpdates'), 'includedUpdateClassifications', variables('updateClassifications_var'), 'rebootSetting', parameters('rebootSetting')), null())]",
                  "targets": {
                    "azureQueries": [
                      {
                        "scope": "[parameters('scopeByResources')]",
                        "tagSettings": {
                          "tags": "[parameters('scopeByTags')]",
                          "filterOperator": "[parameters('scopeByTagsOperation')]"
                        },
                        "locations": "[parameters('scopeByLocations')]"
                      }
                    ],
                    "nonAzureQueries": "[parameters('nonAzureQueries')]"
                  },
                  "azureVirtualMachines": "[parameters('azureVirtualMachines')]",
                  "nonAzureComputerNames": "[parameters('nonAzureComputerNames')]"
                },
                "tasks": {
                  "preTask": {
                    "parameters": "[if(empty(parameters('preTaskParameters')), null(), parameters('preTaskParameters'))]",
                    "source": "[if(empty(parameters('preTaskSource')), null(), parameters('preTaskSource'))]"
                  },
                  "postTask": {
                    "parameters": "[if(empty(parameters('postTaskParameters')), null(), parameters('postTaskParameters'))]",
                    "source": "[if(empty(parameters('postTaskSource')), null(), parameters('postTaskSource'))]"
                  }
                },
                "scheduleInfo": {
                  "interval": "[parameters('interval')]",
                  "frequency": "[parameters('frequency')]",
                  "isEnabled": "[parameters('isEnabled')]",
                  "timeZone": "[parameters('timeZone')]",
                  "advancedSchedule": {
                    "weekDays": "[if(empty(parameters('weekDays')), null(), parameters('weekDays'))]",
                    "monthDays": "[if(empty(parameters('monthDays')), null(), parameters('monthDays'))]",
                    "monthlyOccurrences": "[if(empty(parameters('monthlyOccurrences')), null(), parameters('monthlyOccurrences'))]"
                  },
                  "startTime": "[if(empty(parameters('startTime')), dateTimeAdd(parameters('baseTime'), 'PT10M'), parameters('startTime'))]",
                  "expiryTime": "[parameters('expiryTime')]",
                  "expiryTimeOffsetMinutes": "[parameters('expiryTimeOffsetMinutes')]",
                  "nextRun": "[parameters('nextRun')]",
                  "nextRunOffsetMinutes": "[parameters('nextRunOffsetMinutes')]",
                  "description": "[parameters('scheduleDescription')]"
                }
              }
            },
            {
              "condition": "[not(empty(parameters('cuaId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('pid-{0}', parameters('cuaId'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {},
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the deployed softwareUpdateConfiguration"
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Automation/automationAccounts/softwareUpdateConfigurations', parameters('automationAccountName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the deployed softwareUpdateConfiguration"
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group of the deployed softwareUpdateConfiguration"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]",
        "automationAccount_solutions"
      ]
    },
    {
      "condition": "[not(empty(parameters('privateEndpoints')))]",
      "copy": {
        "name": "automationAccount_privateEndpoints",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointResourceId": {
            "value": "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
          },
          "privateEndpointVnetLocation": {
            "value": "[if(not(empty(parameters('privateEndpoints'))), reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location, 'dummy')]"
          },
          "privateEndpointObj": {
            "value": "[parameters('privateEndpoints')[copyIndex()]]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "privateEndpointResourceId": {
              "type": "string"
            },
            "privateEndpointVnetLocation": {
              "type": "string"
            },
            "privateEndpointObj": {
              "type": "object"
            },
            "tags": {
              "type": "object"
            }
          },
          "variables": {
            "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'), '/'))]",
            "privateEndpoint_var": {
              "name": "[if(contains(parameters('privateEndpointObj'), 'name'), if(empty(parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service), parameters('privateEndpointObj').name), format('{0}-{1}', variables('privateEndpointResourceName'), parameters('privateEndpointObj').service))]",
              "subnetResourceId": "[parameters('privateEndpointObj').subnetResourceId]",
              "service": [
                "[parameters('privateEndpointObj').service]"
              ],
              "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpointObj'), 'privateDnsZoneResourceIds'), if(empty(parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray(), parameters('privateEndpointObj').privateDnsZoneResourceIds), createArray())]",
              "customDnsConfigs": "[if(contains(parameters('privateEndpointObj'), 'customDnsConfigs'), if(empty(parameters('privateEndpointObj').customDnsConfigs), null(), parameters('privateEndpointObj').customDnsConfigs), null())]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-03-01",
              "name": "[variables('privateEndpoint_var').name]",
              "location": "[parameters('privateEndpointVnetLocation')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpoint_var').name]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                      "groupIds": "[variables('privateEndpoint_var').service]"
                    }
                  }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                  "id": "[variables('privateEndpoint_var').subnetResourceId]"
                },
                "customDnsConfigs": "[variables('privateEndpoint_var').customDnsConfigs]"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/default', variables('privateEndpoint_var').name)]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('privateEndpoint_var').privateDnsZoneResourceIds)]",
                    "input": {
                      "name": "[last(split(variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')], '/'))]",
                      "properties": {
                        "privateDnsZoneId": "[variables('privateEndpoint_var').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint_var').name)]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "automationAccount_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-AutoAccount-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "resourceId": {
            "value": "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "principalIds": {
              "type": "array"
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "resourceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Automation Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f353d9bd-d4a6-484e-a77a-8050b599b867')]",
              "Automation Job Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]",
              "Automation Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd3881f73-407a-4167-8283-e981cbba0404')]",
              "Automation Runbook Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2021-04-01-preview",
              "scope": "[format('Microsoft.Automation/automationAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the deployed automation account"
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Automation/automationAccounts', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the deployed automation account"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group of the deployed automation account"
      }
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Automation/automationAccounts', parameters('name')), '2020-01-13-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Automation/automationAccounts', parameters('name')), '2020-01-13-preview', 'full').identity.principalId, '')]",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      }
    }
  }
}
