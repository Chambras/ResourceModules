{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. Remote connection name"
      }
    },
    "vpnSharedKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies a VPN shared key. The same value has to be specified on both Virtual Network Gateways"
      }
    },
    "remoteEntityName": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the remote Virtual Network Gateway/ExpressRoute"
      }
    },
    "localVirtualNetworkGatewayName": {
      "type": "string",
      "metadata": {
        "description": "Required. Specifies the local Virtual Network Gateway name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "virtualNetworkGatewayConnectionType": {
      "type": "string",
      "defaultValue": "Ipsec",
      "allowedValues": [
        "Ipsec",
        "VNet2VNet",
        "ExpressRoute",
        "VPNClient"
      ],
      "metadata": {
        "description": "Optional. Gateway connection type."
      }
    },
    "remoteEntityResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Remote Virtual Network Gateway/ExpressRoute resource group name"
      }
    },
    "remoteEntitySubscriptionId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Remote Virtual Network Gateway/ExpressRoute Subscription ID"
      }
    },
    "enableBgp": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Value to specify if BGP is enabled or not"
      }
    },
    "usePolicyBasedTrafficSelectors": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable policy-based traffic selectors"
      }
    },
    "customIPSecPolicy": {
      "type": "object",
      "defaultValue": {
        "saLifeTimeSeconds": 0,
        "saDataSizeKilobytes": 0,
        "ipsecEncryption": "",
        "ipsecIntegrity": "",
        "ikeEncryption": "",
        "ikeIntegrity": "",
        "dhGroup": "",
        "pfsGroup": ""
      },
      "metadata": {
        "description": "Optional. The IPSec Policies to be considered by this connection"
      }
    },
    "routingWeight": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The weight added to routes learned from this BGP speaker."
      }
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "cuaId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Customer Usage Attribution ID (GUID). This GUID must be previously registered"
      }
    }
  },
  "variables": {
    "localVirtualNetworkGatewayId": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworkGateways', parameters('localVirtualNetworkGatewayName'))]",
    "remoteEntitySubscriptionId_var": "[if(empty(parameters('remoteEntitySubscriptionId')), subscription().subscriptionId, parameters('remoteEntitySubscriptionId'))]",
    "remoteEntityResourceGroup_var": "[if(empty(parameters('remoteEntityResourceGroup')), resourceGroup().name, parameters('remoteEntityResourceGroup'))]",
    "virtualNetworkGateway2Id": {
      "id": "[resourceId(variables('remoteEntitySubscriptionId_var'), variables('remoteEntityResourceGroup_var'), 'Microsoft.Network/virtualNetworkGateways', parameters('remoteEntityName'))]"
    },
    "localNetworkGateway2Id": {
      "id": "[resourceId(variables('remoteEntitySubscriptionId_var'), variables('remoteEntityResourceGroup_var'), 'Microsoft.Network/localNetworkGateways', parameters('remoteEntityName'))]"
    },
    "peer": {
      "id": "[resourceId(variables('remoteEntitySubscriptionId_var'), variables('remoteEntityResourceGroup_var'), 'Microsoft.Network/expressRouteCircuits', parameters('remoteEntityName'))]"
    },
    "customIPSecPolicy_var": [
      {
        "saLifeTimeSeconds": "[parameters('customIPSecPolicy').saLifeTimeSeconds]",
        "saDataSizeKilobytes": "[parameters('customIPSecPolicy').saDataSizeKilobytes]",
        "ipsecEncryption": "[parameters('customIPSecPolicy').ipsecEncryption]",
        "ipsecIntegrity": "[parameters('customIPSecPolicy').ipsecIntegrity]",
        "ikeEncryption": "[parameters('customIPSecPolicy').ikeEncryption]",
        "ikeIntegrity": "[parameters('customIPSecPolicy').ikeIntegrity]",
        "dhGroup": "[parameters('customIPSecPolicy').dhGroup]",
        "pfsGroup": "[parameters('customIPSecPolicy').pfsGroup]"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Network/connections",
      "apiVersion": "2021-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "virtualNetworkGateway1": {
          "id": "[variables('localVirtualNetworkGatewayId')]"
        },
        "virtualNetworkGateway2": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'VNet2VNet'), variables('virtualNetworkGateway2Id'), null())]",
        "localNetworkGateway2": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'Ipsec'), variables('localNetworkGateway2Id'), null())]",
        "peer": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'ExpressRoute'), variables('peer'), null())]",
        "enableBgp": "[parameters('enableBgp')]",
        "connectionType": "[parameters('virtualNetworkGatewayConnectionType')]",
        "routingWeight": "[parameters('routingWeight')]",
        "sharedKey": "[if(equals(parameters('virtualNetworkGatewayConnectionType'), 'ExpressRoute'), parameters('vpnSharedKey'), null())]",
        "usePolicyBasedTrafficSelectors": "[parameters('usePolicyBasedTrafficSelectors')]",
        "ipsecPolicies": "[if(empty(parameters('customIPSecPolicy').ipsecEncryption), parameters('customIPSecPolicy').ipsecEncryption, variables('customIPSecPolicy_var'))]"
      }
    },
    {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Network/connections/{0}', parameters('name'))]",
      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/connections', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('cuaId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('pid-{0}', parameters('cuaId'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {},
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group the remote connection was deployed into"
      }
    },
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the remote connection"
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/connections', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the remote connection"
      }
    }
  }
}
